"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –ø–æ–∏—Å–∫–∞ –ø–æ CSV —Ñ–∞–π–ª—É –±–µ–∑ Telegram –±–æ—Ç–∞.
–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–∏—Å–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.
"""

import pandas as pd
import logging
from bot.config import Config
from bot.sheets_manager import CSVManager  
from bot.question_matcher import QuestionMatcher
from utils.logger import setup_logging

def demo_search():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã."""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging()
    logger = logging.getLogger(__name__)
    
    print("=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –ø–æ–∏—Å–∫–∞ ===")
    print()
    
    try:
        # –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        class DemoConfig:
            def __init__(self):
                self.csv_file_path = 'knowledge_base.csv'
                self.max_results = 3
                self.similarity_threshold = 50.0
                self.cache_duration = 30
        
        config = DemoConfig()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        csv_manager = CSVManager(config)
        question_matcher = QuestionMatcher(config)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
        print("üìä –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π...")
        knowledge_base = csv_manager.get_knowledge_base()
        
        if knowledge_base.empty:
            print("‚ùå –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø—É—Å—Ç–∞!")
            return
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(knowledge_base)} –∑–∞–ø–∏—Å–µ–π")
        print()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = csv_manager.get_stats()
        print("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {stats.get('total_questions', 0)}")
        print(f"   ‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {stats.get('categories', 0)}")
        
        if 'category_breakdown' in stats:
            print("   ‚Ä¢ –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
            for category, count in stats['category_breakdown'].items():
                print(f"     - {category}: {count}")
        print()
        
        # –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_questions = [
            "–∫–∞–∫ –≤–∑—è—Ç—å –æ—Ç–ø—É—Å–∫",
            "–ø—Ä–æ–±–ª–µ–º–∞ —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º", 
            "–∫–∞–∫–æ–π –¥—Ä–µ—Å—Å –∫–æ–¥",
            "VPN –¥–æ—Å—Ç—É–ø",
            "–±–æ–ª–Ω–∏—á–Ω—ã–π",
            "–Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å"
        ]
        
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤:")
        print("=" * 50)
        
        for question in test_questions:
            print(f"\n‚ùì –í–æ–ø—Ä–æ—Å: '{question}'")
            print("-" * 30)
            
            # –ü–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç–æ–≤
            matches = question_matcher.find_matches(question, knowledge_base)
            
            if matches:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(matches)} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π:")
                for i, match in enumerate(matches, 1):
                    print(f"\n{i}. –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ {match['score']}%")
                    print(f"   –í–æ–ø—Ä–æ—Å: {match['question']}")
                    print(f"   –û—Ç–≤–µ—Ç: {match['answer'][:100]}...")
                    print(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {match['category']}")
            else:
                print("‚ùå –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        print("\n" + "=" * 50)
        print("üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print()
        print("–î–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ Telegram –±–æ—Ç–∞:")
        print("1. –°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather –≤ Telegram")
        print("2. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞")
        print("3. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –≤ —Å–µ–∫—Ä–µ—Ç—ã Replit")
        print("4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}")
        print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

if __name__ == "__main__":
    demo_search()